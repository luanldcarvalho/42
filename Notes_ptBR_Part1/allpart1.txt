ft_isalnum
	Verifica se é alpha ou numero
ft_isalpha
	Se alpha retorna numero maior que zero
ft_isascii
	Verifica se está na tabela ascii
ft_isdigit
	Verifica se é um digito (um numero)
ft_isprint
	Verifica se é um caractere imprimível
ft_tolower
	Transforma todos caracteres minusculos em maiusculos
ft_toupper
	Transforma todos caracteres minusculos em maiusculos



*ft_memchr
	Procura na string s a primeira ocorrencia do char c. Procura em n bytes, independendo do tamanho da string.
ft_memcmp
	Compara os primeiros n bytes da string1 e da string2.
*ft_memcpy
	Copia n bytes da string src para a string dest
*ft_memmove
	Copia n bytes de src para uma string, em seguida copiar essa string para destine. É mais lenta que a memcpy mas é mais interessante de usar quando vai sobrepor algum dado na destine.
*ft_memset
	Preenche uma quantidade de memoria com um determinado valor de byte



*ft_strchr
	Retorna um ponteiro para a primeira ocorrencia do char c na string s
*ft_strdup
	Ele retorna um ponteiro para a memória recém-alocada na qual copiou a sequência de caracteres. Mas agora somos responsáveis por essa memória e, eventualmente, devemos usar free.
ft_strlcat
	Concatena na string dst a string src. Concatena size bytes da src.
ft_strlcpy
	Copia na dst n bytes da src e retorna o tamanho da string que foi copiada, nesse caso o tamanho inicial de src
ft_strlen
	Para descobrir o length da string
ft_strncmp
	Compara s1 e s2 por n caracteres para ver se são iguais ou se uma string é maior que outra (em valores dos caracteres pela ASCII)
*ft_strnstr
	Retorna um ponteiro para o inicio da primeira ocorrencia da string menor dentro da string maior
*ft_strrchr
	É bastante semelhante a strchr mas, em vez de retornar a primeira ocorrencia do caractere c na string, precisa retornar a ultima ocorrencia. Nesse caso, podemos começar a procurar do fim ao inicio da string



ft_atoi
	A função atoi converte ASCII para inteiro, literalmente A_scii-TO-I_nt
ft_bzero
	Escreve 0 em uma string n vezes
*ft_calloc
	Faz a alocação de memoria, a diferença dela para a malloc é que a calloc já inicia os valores com 0. É útil, pois em C quando se declara um variável o espaço no mapa de memória usado por esta provavelmente contém algum valor lixo.
