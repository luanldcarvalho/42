#include "libft.h"

void	*ft_calloc(size_t nmemb, size_t size) // Faz a alocação de memoria, a diferença dela para a malloc é que a calloc já inicia os valores com 0. É útil, pois em C quando se declara um variável o espaço no mapa de memória usado por esta provavelmente contém algum valor lixo.
{
	int	*pointer; // Iniciamos um ponteiro para o tipo int
	int	size_mem;

	if (nmemb == 0 || size == 0) // Se nmemb ou size é 0 significa que ou a quantidade de elementos ou o tamanho desses elementos em bytes não foram informados
		return (NULL); // Com isso a função retorna 0
	size_mem = nmemb * size; // Caso nmemb e size for diferente de 0, size_mem agora recebe o numero de caracteres (nmemb) multiplicado pelo tamanho desses caracteres (size)
	pointer = malloc(size_mem); // O pointer recebe uma alocação de memoria, usando malloc com size_mem em parametro. Irá alocar o espaço necessario para x elementos com y bytes cada elemento
	ft_bzero(pointer, size_mem); // Usamos a função bzero para escrever 0 no pointer em size_mem byter. Ou seja, size_mem vezes.
	return (pointer); // No fim retornamos o pointer, que aponta para o inicio da alocação de memoria que iniciamos com todos os bytes ocupados com 0
}
