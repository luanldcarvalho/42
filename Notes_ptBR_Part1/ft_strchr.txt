#include "libft.h"

char	*ft_strchr(const char *s, int c) // Retorna um ponteiro para a primeira ocorrencia do char c na string s
{
	char	*str; // Ponteiro para string tipo char
	int		i; // Index
	int		leng_s; // Leng_s é o length da string

	str = (char *)s; // str aponta para o mesmo lugar que s, agora com seus valores tratados pelo casting transformando em char (s é const char e por isso não pode ser alterado nada)
	i = 0; // Inicio de index em zero
	leng_s = ft_strlen(s); // Tamanho da string recebe o tamanho de s, usamos a função strlen para calcular esse tamanho
	while (i < leng_s) // Enquanto index for menor que o tamanho da string, ou seja, enquanto existir valores dentro da string. Entra no loop
	{
		if (str[i] == c) // Se o valor de str no index é igual a c, encontramos a primeiro ocorrencia de c na string
			return (&str[i]); // Retornamos um ponteiro para esse local da primeira ocorrencia
		i++; // Se o valor de str no index não é igual a c, incrementamos no index para comparar o proximo caractere da string
	}
	if (c == '\0') // Se o caractere passado for nulo, é retornado um ponteiro para para o fim da string
		return (&str[i]);
	return (NULL); // Se nenhum caractere for encontrado na string, é retornado null
}

	str = (char *)s; //casting, transformando em um ponteiro do tipo char
	// sem o * da esse erro: incompatible integer to pointer conversion assigning to 'char *' from 'char' [-Werror,-Wint-conversion]
	i = 0; //iniciando index
	leng_s = ft_strlen(s); //iniciando tamanho d astring, com a fc strlen
	while (i < leng_s) //enquanto index < tamanho da string
	{
		if (str[i] == c) //se string no index é igual ao char
			return (&str[i]); //retorna a string nesse ponto
		i++; //se nao, incrementa o index
	}
	if (c == '\0') //se o char passado é nulo
		return (&str[i]); //retorna um ponteiro para o fim da string
		// these functions return a pointer to the terminator
	return (NULL); //se nao encontrar o char, retorna Null
}
